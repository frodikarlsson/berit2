(ns
amoebas.competition2021.berit2.core
(:use
amoebas.defs
amoebas.lib
amoebas.run)
)
(defn-
m823e9a7f
[hkjasd727
hjksd723
ksjds823]
(let
[sdkj109283
(fn
[lkjl7]
(if
(:occupant
lkjl7)
(+
(:fuel
lkjl7)
(:energy
(:occupant
lkjl7)))
(:fuel
lkjl7))
)
]
(last
(sort-by
#(sdkj109283
(ksjds823
%))
hkjasd727))
)
)
(defn-
jikjsd823
[hkjasd727
hjksd723
ksjds823]
(let
[
kj92832
(sort-by
#(:health
(:occupant
(ksjds823
%)))
hkjasd727)
jikisd823
(take-while
#(<
(:health
(:occupant
(ksjds823
%)))
HitLoss)
kj92832)
]
(if
(empty?
jikisd823)
(m823e9a7f
hkjasd727
hjksd723
ksjds823)
(last
(into
[]
jikisd823))
)
)
)
(def
^:private
^:const
jjkisd823
jikjsd823)
(def
^:private
^:const
iiiiiiiiii
2r100)
(def
^:private
^:const
ijkisd823
2r1010)
(def
^:private
^:const
iiiiiiiiiiii
16r41)
(def
^:private
^:const
iiiiiiiiiliiksjds823
8r60)
(def
^:private
^:const
iiiiiiiiiii
4)
(defn-
bIlIIlI1I
[hjksd723
pos
ksjds823]
(let
[
bIlJIlI1I
(ksjds823
pos)
bIlJllI1I
(:occupant
bIlJIlI1I)
]
(and
bIlJllI1I
(=
hjksd723
(:species
bIlJllI1I))
(not
(nil?
(:data
bIlJllI1I)))
(=
(:data
bIlJllI1I)
1))
)
)
(defn-
bllIIll1I
[hjksd723
sdsd8734
ksjds823]
(filter
#(bIlIIlI1I
hjksd723
%
ksjds823)
sdsd8734)
)
(defn-
bIlIIll1I
[lkj3823
ksjds823
hjksd723]
(sort-by
#(count
(bllIIll1I
hjksd723
(Env-Sections
%)
ksjds823))
lkj3823)
)
(defn-
asd98098
[]
(fn
[O000O0
O0O0O0
hjksd723
ksjds823
O0O0OO]
(let
[
O00OO0
(empty-neighbors
ksjds823)
bIlIIl1I
(if
(not-empty
(hostiles
hjksd723
Environment
ksjds823))
1
0)
askbii232
(fn
[]
(let
[OO00OO
(sections-by-fuel
O00OO0
ksjds823)]
(cond
(empty?
O00OO0)
{:cmd
:rest
:data
bIlIIl1I}
(not-empty
(hostiles
hjksd723
Environment
ksjds823))
{:cmd
:move
:dir
(last
(sections-by-hostiles
O00OO0
ksjds823
hjksd723))
:data
bIlIIl1I}
(not-empty
(bllIIll1I
hjksd723
Environment
ksjds823))
{:cmd
:move
:dir
(last
(bIlIIll1I
O00OO0
ksjds823
hjksd723))
:data
0}
:default
{:cmd
:move
:dir
(last
OO00OO)
:data
bIlIIl1I}
)
)
)
askbi232
(fn
[]
(let
[
O00OO0
(empty-neighbors
ksjds823)
OO00OO
(sections-by-fuel
O00OO0
ksjds823)
]
(if
(and
(not-empty
O00OO0)
(<
(:fuel
(ksjds823
Here))
MaxFuelingEnergy)
)
(askbii232)
{:cmd
:rest
:data
bIlIIl1I}
)
)
)
askdi232
(fn
[]
(let
[
hkjasd727
(hostiles
hjksd723
Neighbors
ksjds823)
]
(cond
(<
O000O0
2r1010)
(askbi232)
(empty?
hkjasd727)
(askbi232)
:default
{:cmd
:hit
:dir
(Neighbor-To-Dir
(jjkisd823
hkjasd727
hjksd723
ksjds823))
:data
bIlIIl1I}
)
)
)
askdj232
(fn
[O00OO0]
(cond
(empty?
O00OO0)
(askbi232)
(>
(count
(into
[]
(friendlies
hjksd723
Environment
ksjds823)))
(/
iiiiiiiiiliiksjds823
4))
(askbii232)
(not-empty
(hostiles
hjksd723
Environment
ksjds823))
{:cmd
:divide
:dir
(last
(sections-by-hostiles
O00OO0
ksjds823
hjksd723))
:child-data
bIlIIl1I}
(not-empty
(bllIIll1I
hjksd723
Environment
ksjds823))
{:cmd
:divide
:dir
(last
(bIlIIll1I
O00OO0
ksjds823
hjksd723))
:child-data
bIlIIl1I}
:default
{:cmd
:divide
:dir
(last
(sections-by-fuel
O00OO0
ksjds823))
:child-data
bIlIIl1I}
)
)
]
(cond
(or
(<
O000O0
ijkisd823)
(and
(>
(total-fuel
Environment
ksjds823)
(-
(*
MaxCellEnergy
iiiiiiiiiliiksjds823)
(*
2
MaxCellEnergy)))
(>
(count
(friendlies
hjksd723
Neighbors
ksjds823)
)
iiiiiiiiiii)
)
)
(askbi232)
(not-empty
(hostiles
hjksd723
Neighbors
ksjds823))
(askdi232)
(>
O000O0
iiiiiiiiiiii)
(askdj232
(empty-neighbors
ksjds823))
:default
(askbi232)
)
)
)
)
(def
Evam
(asd98098))